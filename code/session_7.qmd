---
title: "session_7"
author: "Julian Maitra"
format: pdf
editor: visual
---

# Session 7

**Sujet : Manipuler les donn√©es (partie 1)**

Le premier but de cette session est d'apprendre √† importer des donn√©es
dans RStudio √† partir de **fichier CSV** et de les stocker en forme de
data frame (format tabulaire).

Le deuxi√®me but est de se familiariser avec `dplyr` (prononc√©
"dee-ply-er" en anglais), un paquet du `tidyverse` con√ßu pour manipuler
les donn√©es en forme de data frame.

Contrairement aux jeux de donn√©es int√©gr√©s √† R (tels que `diamonds`,
etc.), la plupart des jeux de donn√©es du monde r√©el n√©cessitent des
**transformations** avant de pouvoir √™tre analys√©s et visualis√©s. √Ä
cette fin, nous examinerons √©galement certaines transformations de types
de variables et un nouvel op√©rateur, le `%>%` (angl. "pipe"; trad.
fran√ß. "tuyau"), qui est tr√®s utile pour les manipulations de donn√©es.

## Lire des donn√©es dans RStudio

Par la suite, nous alons appliquer ces verbes avec un jeu de donn√©es
concret, un fichier CSV nomm√© `igposts.csv`, qui contient des posts
Instagram de c√©l√©brit√©es qui ont re√ßu beaucoup d'interactions
d'utilisateurs. Pour y arriver, il faut charger ce jeu de donn√©es dans
notre session RStudio en cours.

::: {.callout-note icon="true"}
## √Ä noter

Un fichier de type **CSV** (angl. comma-separated values) est un format
textuel simple pour sauvegarder des donn√©es en forme de tableau, c'est √†
dire avec des valeurs organis√© par lignes et colonnes et s√©par√©es par
virgules.

Le format CSV pr√©sente l'avantage d'√™tre assez l√©ger et compatible avec
tous les syst√®mes d'exploitation. En outre, il est utile pour stocker
des donn√©es quantitatives en sciences sociales, qui se pr√©sentent
souvent sous forme de tableaux.

Voici un exemple de format CSV simple :

nom, pr√©nom, √¢ge\
Leclerc, Antoine, 53\
Gomez, Hugo, 25\
Nguyen, Laetitia, 19\

Que nous pouvons afficher comme tableau (√† noter que la premi√®re ligne
d√©signe les noms des colonnes) :

| nom     | pr√©nom   | √¢ge |
|:--------|:---------|:---:|
| Leclerc | Antoine  | 53  |
| Gomez   | Hugo     | 25  |
| Nguyen  | Laetitia | 19  |
:::

Avant l'importation de fichier CSV dans RStudio (et comme d√©j√† vu pleins
de fois dans le cours üòâ), il faut d'abord charger les paquets
n√©cessaire avec `library()` et d√©finir son r√©p√©rtoire de travail (vous
devez adapter les param√®tres de `setwd()` pour qu'il marche sur votre
ordinateur) :

```{r}
#| echo: true
#| output: false
#| warning: false
library(tidyverse)
 
setwd("/Users/domus_julian/Documents/GitHub/intro-a-R/code")
 
```

Pour charger le jeu de donn√©es `igposts.csv` dans RStudio, vous pouvez
suivre le processus suivant :

1.  Vous t√©l√©chargez le fichier `igposts.csv` depuis le [site Moodle du
    cours](https://moodle.unifr.ch/course/view.php?id=276028#section-7)
    (voir mat√©riel de la 7e session).

2.  Stockez le fichier `igposts.csv` dans le dossier que vous avez
    d√©finit comme r√©p√©rtoire de travail.

3.  Ensuite, vous utilisez le menu int√©ractif dans RStudio : File -\>
    Import Dataset -\> From Text (base)... et choisissez `igposts.csv`.

4.  Une fen√™tre avec des param√®tre apparait, que vous pouvez remplir de
    la mani√®re suivante :

    ![](screenshot_import_dataset_RStudio.png)

    -   Explications des param√®tres :

        -   **Encoding = UTF-8** : Indique √† RStudio d'utiliser
            [l'encodage de caract√®res
            UTF-8](https://blog.hubspot.fr/website/encodage-utf-8) (qui
            est un standard tr√®s r√©pandu), ce qui est important pour
            lire correctement toutes les lettres (notamment les
            caract√®res avec des accents : √©, √§, √™, etc.).

        -   **Heading = YES** : Indique √† RStudio que la premi√®re ligne
            du fichier CSV contient les noms des colonnes.

        -   **Separator = Comma** : Indique √† RStudio que les valeurs du
            tableau sont s√©par√©es par des virgules (attention, certains
            documents francophones utilisent le point-virgule ( ;) √† la
            place de la virgule).

        -   **Decimal = Period** : Indique √† RStudio que le point (.)
            est utilis√© pour les d√©cimales (et non la virgule comme
            souvent dans les documents en fran√ßais).

        -   **na.strings = #N/A** : Indique √† RStudio que les cellules
            vides dans le tableau sont d√©sign√©es par #N/A (cela peut
            √™tre diff√©rent dans d'autres fichiers CSV).

5.  Finalement, vous pouvez copier et coller le code qui appara√Æt dans
    la console dans votre script R pour facilement recharger le fichier
    CSV ult√©rieurement.

```{r}
# Par exemple, pour l'ordinateur de l'enseignant, ce code est le suivant : 

igposts <- read.csv("/Users/domus_julian/Documents/GitHub/intro-a-R/code/igposts.csv", encoding="UTF-8", na.strings="#N/A")
 
# Si tout a bien march√©, l'objet igposts devrait appara√Ætre dans votre environnement
# Nous pouvons afficher la structure de igposts pour une premi√®re impression :

str(igposts)
```

Cela nous montre qu'il s'agit d'un data frame avec 100 observations et
12 variables. Chaque ligne repr√©sente un post Instagram d'une c√©l√©brit√©
(unit√© statistique) et chaque colonnes une variable diff√©rente associ√© √†
ce post.

Notez que les variables sont soit de type textuel (chr = "character"; p.
ex. `Account`= le nom du compte Insta qui a publi√© le post), soit
num√©rique (int = "integer"; p. ex. `Total.Interactions` = la somme des
`Likes`et `Comments` qu'un post a re√ßu).

Vous pouvez aussi cliquer sur l'objet et explorer le tableau
manuellement pour le comprendre d'avantage (comme nous l'avons fait avec
`mtcars`, etc.).

::: {.callout-caution collapse="false"}
## Attention

-   Vous ne devez pas ouvrir les fichiers CSV avec des autres logiciels
    avant de les importer dans RStudio (par ex. avec Excel), car cela a
    souvent pour cons√©quence de modifier automatiquement le format du
    fichier CSV, ce qui entra√Æne ensuite des erreurs.

-   Vous devriez enregistrer le fichier CSV directement dans votre
    r√©pertoire de travail sans l'ouvrir, puis l'importer dans RStudio √†
    l'aide du menu interactif.

-   Vous devriez √©galement √©viter d'ouvrir le fichier CSV avec des
    applications ou autres (p. ex. application Moodle), ce qui peut
    √©galement entra√Æner des erreurs.

-   Il est pr√©f√©rable de t√©l√©charger les fichiers CSV avec des
    navigateurs standard tels que Chrome ou Safari.
:::

Avant de continuer avec `dplyr`, regardons encore deux √©l√©ments
cruciales pour la manipulation de donn√©es avec R :

-   la transformation du types de variable (p. ex. de variables
    textuelles en facteurs)

-   L'op√©rateur `%>%` (angl. "pipe"; trad. fran√ßaise "tuyau")

### La transformation du type de variable

Lorsque l'on analyse des jeux de donn√©es, on constate parfois que toutes
les variables **ne sont pas enregistr√©es dans un format utile pour
l'analyse**. Parfois, par exemple, les valeurs num√©riques sont
enregistr√©es sous forme de texte. Il est alors utile de les transformer
dans un format num√©rique (par exemple avec la fonction `as.numeric()`.

Mais il y a aussi le cas suivant : les variables sous forme de texte ne
repr√©sentent pas simplement des textes, mais certaines **cat√©gories**.
Dans ce cas, il est judicieux de les transformer en une variable
cat√©gorielle, c'est-√†-dire un facteur, √† l'aide de la fonction
`as.factor()`.

Dans notre exemple de jeu de donn√©es `igposts`, qui contient des
m√©triques sur les posts Instagram, nous pouvons justement constater
cela. Certes, certaines variables textuelles, telles que `URL` (le lien
vers le post) et `Description` (le message textuel associ√© au post
Instagram), sont tout √† fait pertinentes. D'autres, en revanche, sont
des cat√©gories. La plus √©vidente est la variable `Type`, qui indique si
un post Instagram est une photo, une vid√©o ou un album. Factorisons
ci-dessous quelques-unes de ces variables cat√©gorielles √† l'aide de code
:

```{r}
# Transformons les colonnes "Account", "User.Name" et "Type" en facteurs :

igposts$Account <- as.factor(igposts$Account)

igposts$User.Name <- as.factor(igposts$User.Name)

igposts$Type <- as.factor(igposts$Type)

# V√©rifier, si √ßa a march√© :

str(igposts)

```

Nous allons voir par la suite, pourquoi ces factorisations sont utiles.

### L'op√©rateur `%>%`

La fonction principale du pipe `%>%` : construire **une s√©quence de
fonctions ("un tuyau")** qui est plus facile √† comprendre et a lire dans
le code.

```{r}
# Par exemple, regardez la fonction suivante : quel est le probl√®me ?

log(sqrt(mean(c(1:100))))

# Le probl√®me est que cette fonction est imbriqu√©e et, √† cause de cela, difficile √† lire

# Avec le pipe, nous pouvons re√©crire cette fonction comme √ßa et obtenir le m√™me r√©sultat apr√®s ex√©cution du code :

c(1:100) %>% mean() %>% sqrt() %>% log()
```

::: {.callout-tip title="Astuce"}
Vous pouvez cr√©er le pipe `%>%` avec les raccourcis clavier suivants :

-   Sur **Windows** : <kbd>Control</kbd> + <kbd>Shift</kbd> +
    <kbd>M</kbd>

-   Sur **MacOS** : <kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>M</kbd>

De plus, vous pouvez aussi utiliser `|>` comme op√©rateur pipe alt√©rnatif
(√©quivalent √† `%>%`).
:::

Vous pouvez d√©j√† constater que travailler avec des jeux de donn√©es du
monde r√©el, tels que le jeu de donn√©es Instagram `igposts`, n√©cessite un
travail pr√©paratoire substantiel. Mais rassurez-vous et ne vous
d√©couragez pas, plus vous pratiquez, plus cela devient facile et,
bient√¥t, vous serez en mesure de charger facilement des ensembles de
donn√©es dans RStudio ! Par ailleurs : il est normal de rencontrer des
messages d'erreur. C'est une partie essentielle du processus
d'apprentissage que de les surmonter en bricolant et en jouant avec vos
donn√©es jusqu'√† ce que vous puissiez les faire fonctionner.

Apr√®s avoir charg√© notre fichier CSV dans RStudio, appliqu√© des
transformations et notre connaissance de l'op√©rateur pipe, nous pouvons
maintenant manipuler les donn√©es avec le package `dplyr`.

## Manipuler les donn√©es avec `dplyr`

Le paquet `dplyr` est bas√© sur une logique de *verbes* pour les
diff√©rents types de manipulation de donn√©es, notamment :

-   Les verbes pour manipuler les donn√©es au niveau de **colonnes** :

    -   `select()` : pour extraire une ou plusieurs colonnes d'un data
        frame.

    -   `mutate()` : pour cr√©er une ou plusieurs nouvelles colonnes dans
        un data frame.

-   Les verbes pour manipuler les donn√©es au niveau de **lignes** :

    -   `filter()` : pour filtrer les lignes d'un data frame selon un ou
        plusieurs crit√®res.

    -   `arrange()` : pour trier les lignes d'un data frame selon un ou
        plusieurs crit√®res.

-   Les verbes pour **r√©sumer, compter et regrouper** les donn√©es :

    -   `summarize()` : pour r√©duire une ou plusieurs colonnes d'un data
        frame en une seule ligne, notamment pour r√©sumer des donn√©es.

    -   `count()` : pour compter le nombre d'observations d'une ou
        plusieurs cat√©gories dans un data frame.

    -   `group_by()` : pour regrouper des donn√©es d'un data frame selon
        une ou plusieurs cat√©gories.

Essayons maintenant d'appliquer tout cela avec du code et les donn√©es
`igposts` pour comprendre ce que √ßa veut dire en pratique !

### Manipulation de colonnes : `select()`et `mutate()`

```{r}
#| echo: true
#| output: false
# select() : fonction pour extraire une ou plusieurs colonnes d'un data frame

# Par exemple, nous pouvons extraire le quatres colonnes suivantes d'igposts (voir comment le pipe est utilis√©)

igposts %>% select(Account, Type, Followers.at.Posting, Total.Interactions)

# Avec les deux points dans la fonction select(), vous pouvez s√©lectionner plusieurs colonnes successives. Notez que cette fois-ci, nous affichons que les six premi√®res lignes avec la fonction head() :

igposts %>% 
  select(Account:Views) %>% 
  head()

# Vous pouvez √©galement cr√©er un nouvel objet, df1, qui est essentiellement un data frame plus petit que igposts avec un sous-ensemble de variables (un tel data frame plus petit peut √™tre plus utile √† analyser et √† afficher) :
  
df1 <- igposts %>% 
          select(Account, 
                 Type, 
                 Followers.at.Posting, 
                 Total.Interactions,
                 URL)

str(df1)
```

```{r}
#| echo: true
#| output: false
# mutate() : fonction pour cr√©er une ou plusieurs nouvelles colonnes dans un data frame

# Par exemple, nous pouvons cr√©er une nouvelle colonne qui compte le nombre d'interactions par follower

df1 %>% mutate(TI_par_Follower = Total.Interactions/Followers.at.Posting)

# Attention, sans op√©rateur <-, nous ne changeons pas l'objet df1
# Pour ce faire et sauvegarder notre nouvelle colonne, nous pouvons l'√©craser :

df1 <- df1 %>% 
        mutate(TI_par_Follower = Total.Interactions/Followers.at.Posting)

str(df1)
```

### Manipulation de lignes avec `filter()` et `arrange()`

```{r}
#| echo: true
#| output: false
# filter() : fonction pour filtrer les lignes selon un ou plusieurs crit√®res

# Pour filtrer pour une valeur sp√©cifique d'une variable, p.ex. les posts de Cristiano Ronaldo : 

df1 %>% filter(Account == "Cristiano Ronaldo")

# Pour plusieurs valeurs sp√©cifique de la m√™me variable, p. ex. les posts de Ronaldo et Messi :

df1 %>% filter(Account %in% c("Cristiano Ronaldo", "Leo Messi"))

# Pour plusieurs valeurs sp√©cifiques de variables diff√©rentes, p. ex. les posts de type Photo de Ronaldo :

df1 %>% 
  filter(Account == "Cristiano Ronaldo", 
         Type == "Photo")

# Filtrer √† partir de valeurs num√©riques, p. ex. les posts avec au moins 10 millions d'int√©ractions :

df1 %>% 
  filter(Total.Interactions >= 10000000)

# Filtrer pour les posts de Selena Gomez avec au moins 10 millions d'int√©ractions :

df1 %>% 
  filter(Account == "Selena Gomez", 
         Total.Interactions >= 10000000)
```

```{r}
#| echo: true
#| output: false
# arrange() : fonction pour trier les lignes selon un ou plusieurs crit√®res

# Trier des valeurs/facteurs textuelles par ordre alphab√©tique :

df1 %>% arrange(Account) %>% head(10)

# Trier par le nombre d'int√©ractions (ordre croissant)

df1 %>% 
  arrange(Total.Interactions) %>% 
  head(10)

# Trier par le nombre d'int√©ractions par follower (ordre d√©croissant)

df1 %>% 
  arrange(desc(TI_par_Follower)) %>% 
  head(10)
```

### R√©sumer, compter et regrouper avec `summarize()`, `count()` et `group_by()`

```{r}
#| echo: true
#| output: false
# summarize() : fonction qui r√©duit une ou plusieurs colonnes en une seule ligne, 
# notamment pour r√©sumer des donn√©es

# Nous pouvons, par exemple, r√©sumer la somme totale de Total.Interactions dans notre ensemble de donn√©es. Ce nombre est assez impressionnant et constitue une caract√©ristique importante de notre ensemble de donn√©es.

df1 %>% summarize(sum_TI = sum(Total.Interactions)) 

# Nous pouvons aussi calculer les moyennes des int√©ractions et de followers de tout les comptes qui ont publi√© les posts :

df1 %>% 
  summarize(mean_TI = mean(Total.Interactions), 
                  mean_Followers = mean(Followers.at.Posting)) 
```

```{r}
#| echo: true
#| output: false

# count() : fonction qui compte le nombre d'observations d'une ou plusieurs cat√©gories

# Compter l'occurence des types de posts Instagram (Photo et Album, dans ce cas) dans notre jeu de donn√©es :

df1 %>% 
  count(Type)

# Compter l'occurence des diff√©rents comptes dans notre jeu de donn√©es :

df1 %>% 
  count(Account)

# Compter l'occurence des diff√©rents comptes dans notre jeu de donn√©es en les triant par cette occurence de mani√®re d√©croissante (avec le param√®tre arrange(-n)) :

df1 %>% 
  count(Account) %>% 
  arrange(-n) %>% 
  head(10)
```

```{r}
#| echo: true
#| output: false

# group_by() : fonction qui regroupe des donn√©es selon une ou plusieurs cat√©gories

# Regroupement par type de post et comparaison du nombre moyen d'interactions par type de post :

df1 %>% group_by(Type) %>% summarize(mean_TI = mean(Total.Interactions)) 

# En utilisant le param√®tre n=n() dans la fonction summarize(), nous pouvons √©galement compter le nombre d'observations dans chaque cat√©gorie :

df1 %>% 
  group_by(Type) %>% 
  summarize(n = n(), 
            mean_TI = mean(Total.Interactions)) 

# Utilisons plusieurs verbes dplyr pour trouver les 10 comptes qui apparaissent le plus fr√©quemment dans nos ensembles de donn√©es de posts Instagram. Nous r√©sumons √©galement leur nombre moyen de followers et d'interactions.

df1 %>% 
  group_by(Account) %>% 
  summarize(n = n(), 
            mean_Followers = mean(Followers.at.Posting),
            mean_TI = mean(Total.Interactions)) %>% 
  arrange(desc(n)) %>% 
  head(10)

# Utilisons plusieurs verbes dplyr pour comparer les Likes et Comments des posts de Ronaldo et Messi :

igposts %>%
  group_by(Account) %>%
  filter(Account %in% c("Cristiano Ronaldo", "Leo Messi")) %>% 
  summarize(n = n(), mean_Followers = mean(Followers.at.Posting),
            mean_Likes = mean(Likes),
            mean_Comments = mean(Comments)) 
```

## Devoir pour Session 8 et infos questionnaire/Problem Set 3

-   Attention, **la session 8 du 17 et 18 avril 2024 sera une session en
    auto-apprentissage !** Il n'y a donc pas d'enseignement en classe √†
    Fribourg.

-   Le mat√©riel de session 8, la deuxi√®me partie de la manipulation de
    donn√©es, sera accessible sur ce site √† partir du 17 avril.

-   Assurez-vous d'avoir **rempli le questionnaire avant la date
    limite** (**19 avril 2024 √† 23h59**). Tou(te)s les √©tudiant(e)s qui
    auront rempli le questionnaire √† temps recevront 2 points de bonus
    pour le probl√®me set 4 (10% des points).

-   Si vous avez des difficult√©s √† acc√©der au questionnaire via le lien
    personnalis√© qui vous a √©t√© envoy√© par e-mail : Essayez √† nouveau
    avec diff√©rents navigateurs, sur votre t√©l√©phone portable et
    d√©sactivez les √©ventuels ad-blockers. Si n√©cessaire, veuillez
    contacter l'enseignant afin de recevoir un nouveau lien par e-mail.

-   Dans deux semaines, les 24 et 25 avril, aura lieu **Problem Set 3**.
    Il portera principalement sur les contenus des sessions 7 et 8
    (manipulation de donn√©es). Comblez vous-m√™me les √©ventuelles lacunes
    de vos connaissances (p. ex. configurer correctement le r√©pertoire
    de travail, utiliser l'op√©rateur d'assignation `<-`, etc.)
    Assurez-vous de pouvoir lire correctement les fichiers CSV dans
    RStudio, car cela sera n√©cessaire pour r√©soudre l'ensemble de
    probl√®mes 3.
