---
title: "Exercices M√©thodes II"
date: 2024-02-22
author:
  - name: Julian Maitra
    orcid: 0000-0003-3989-5158
    email: julian.maitra@unifr.ch
    affiliation: 
      - name: Universit√© de Fribourg
        url: www.unifr.ch
license: "MIT"
copyright: 
  holder: Julian Maitra
  year: 2024
format: html
editor: visual
---

# Session 1

```{r}
#| echo: false
#| output: false
library(formatR)
knitr::opts_chunk$set(tidy.opts = list(width.cutoff = 60), tidy = TRUE)
```

Bienvenue dans la premi√®re le√ßon du cours **Exercices M√©thode II** du
Bachelor en sciences de la communication √† l'Universit√© de Fribourg !

Sur cette page, je vous guiderai dans vos premiers pas avec R.

R est un langage de programmation open-source qui vous permet d'analyser
et de visualiser des donn√©es sur des ph√©nom√®nes de communication
int√©ressants.

Pour utiliser R sur votre ordinateur portable, vous devez d'abord
installer les deux logiciels suivants :

1.  le langage de programmation [R](https://cran.r-project.org)
2.  l'interface [RStudio](https://posit.co/download/rstudio-desktop/)

Notez que nous n'√©crirons le code R que dans RStudio, l'interface. Le
langage de programmation R doit d'abord √™tre install√©, mais il
fonctionnera ensuite en arri√®re-plan. Il n'est donc pas n√©cessaire
d'ouvrir R directement par la suite.

## L'interface RStudio

[![Volets
RStudio](docs/volets_rstudio.png)](https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html)

Dans RStudio, il existe quatre volets diff√©rents :

1.  Le volet **source**
2.  Le volet **console**
3.  Le volet **environnement**
4.  Le volet **output**

## Executer un script R

Nous travaillons principalement dans le volet **source**, c'est l√† que
nous √©crivons notre code.

Vous pouvez ouvrir le volet source en cr√©ant un nouveau **R script**
(cliquez sur le signe plus vert dans le coin sup√©rieur gauche). Vous
pouvez r√©√©crire ou copier-coller le calcul simple suivant et l'ins√©rer
dans votre script :

```{r}
#| echo: true
#| output: false
10+14
```

Une fois que nous avons √©crit du code R dans le script, nous pouvons
**l'ex√©cuter** en le s√©lectionnant et en cliquant sur le bouton
d'ex√©cution situ√© au-dessus du volet source (le bouton d'ex√©cution avec
la fl√®che verte √† qui montre √† droite).

C'est alors dans le volet de la **console** o√π le r√©sultat va √™tre
affich√© :

```{r}
#| echo: false
#| output: true
10+14
```

Notez que le nombre entre crochets indique la ligne du r√©sultat. Ici, il
s'agit de 1 car il n'y a qu'une seule ligne.

Voici quelques autres calculs simples, suivi de leurs r√©sultats :

```{r}
#| echo: true
#| output: true
1+2
99-98
2*10
100/2

2^10
```

::: {.callout-tip title="Astuce"}
Pour ex√©cuter le code R plus rapidement, vous pouvez placer votre
curseur sur une ligne de code √† ex√©cuter et utiliser les raccourcis
clavier suivants :

-   Sur **Windows** : <kbd>CTRL</kbd> + <kbd>Enter</kbd>

-   Sur **MacOS** : <kbd>Command</kbd> + <kbd>Enter</kbd>
:::

## Commenter votre code avec un `#`

C'est une bonne pratique de **commenter** son code R. Les commentaires
expliquent ce que le code fait et facilite l'utilisation ult√©rieure et
aussi le partage de code entre personnes (qui ne savent peut-√™tre pas ce
que vous vouliez faire avec votre code).

On commente en ajoutant un symbole **`#`** au d√©but de la ligne de code,
comme ceci :

```{r}
# Ceci est un commentaire, et R l'ignorera lors de l'ex√©cution du script.
```

## L'op√©rateur d'affectation `<-`

L'op√©rateur d'affectation **`<-`** est un op√©rateur cl√© de la
programmation R. Il permet d'attribuer des valeurs aux variables.

```{r}
#| echo: true
# Par exemple, nous pouvons attribuer la valeur 5 √† la variable x :
x <- 5
```

Si vous ex√©cutez ce code, une nouvelle variable, `x`, sera cr√©√©e dans le
volet **environnement** en haut √† droite de RStudio.

::: {.callout-note icon="true"}
## √Ä noter

En g√©n√©ral, la programmation R parle aussi d'**objets**, ou de
**structures de donn√©es**, que vous pouvez cr√©er. C'est pourquoi R est
√©galement appel√© **langage de programmation orient√© objet**. Les
variables √† un √©l√©ment sont des objets tr√®s simples. Au cours de ce
cours, nous d√©couvrirons d'autres types d'objets.
:::

::: {.callout-tip title="Astuce"}
Vous pouvez cr√©er l'operateur d'affectation `<-` avec les raccourcis
clavier suivants :

-   Sur **Windows** : <kbd>Alt</kbd> + <kbd>-</kbd>

-   Sur **MacOS** : <kbd>Option</kbd> + <kbd>-</kbd>
:::

## Variables √† √©l√©ment unique

Vous pouvez **imprimer** (afficher) la valeur d'une variable que vous
avez cr√©√©e, telle que `x`, en tapant le nom de la variable et en
l'ex√©cutant.

```{r}
#| echo: true
x
```

::: {.callout-important title="Important"}
-   Veillez toujours √† ex√©cuter votre code pour cr√©er des variables
    avant de les utiliser pour d'autres op√©rations. Si vous oubliez de
    cr√©er les variables en premier, vous obtiendrez une erreur comme
    r√©sultat.
:::

Par exemple, essayez d'ex√©cuter ce qui suit : `y + z`

Pourquoi cela cr√©e une erreur ? R√©ponse : les variables `y` et `z` n'on
pas encore √©t√© d√©finies !

Pour √©liminer l'erreur, nous devons donc d√©finir `y` et `z`.

```{r}
#| echo: true
#| output: true
y <- 7
z <- 3 

# Essayons encore une fois :
y + z
```

Maintenant √ßa marche ! üòÄ

::: {.callout-important title="Important"}
-   Sachez aussi que si vous attribuez une nouvelle valeur √† une
    variable existante, l'ancienne valeur sera √©cras√©e !
:::

```{r}
#| echo: true
# Notez que si vous ex√©cutez toutes les lignes de code suivantes, la variable x se voit attribuer la derni√®re valeur ex√©cut√©e : 4. Les valeurs 5 et 100 sont ecras√©es lors de l'ex√©cution du code.
x <- 5
x <- 100
x <- 4
x
```

### Les diff√©rents types de variable : num√®riques, textuelles et logique

Jusqu'√† pr√©sent, nous avons cr√©√© des variables de **type num√©rique**,
telles que `x` (valeur = 5).

Cependant, ce n'est pas le seul type de variable dans R.

::: {.callout-note icon="true"}
## √Ä noter

Dans R, il existe diff√©rents types de variables :

-   les variables **num√©riques**

-   les variables **textuelles**, √©galement appel√©es *character strings*
    (cha√Ænes de caract√®res).

-   les variables **logiques** avec les valeurs TRUE et FALSE (VRAI et
    FAUX)
:::

```{r}
#| echo: true
# Regardons quelques exemples avec du code ! (faut tout ex√©cuter !)

# variables num√©riques :
a <- 100
b <- 77

age <- 21
Insta_likes <- 1539

# variables textuelles (toujours ajouter des guillemets !)
c <- "chien"
d <- "chat"

Comm_TikTok <- "wsh"
Moliere <- "il n‚Äôest rien d‚Äô√©gal au tabac : c‚Äôest la passion des honn√™tes gens"

# variables logiques :

e <- TRUE
f <- FALSE
```

Les variables logiques peuvent √™tre utiles quand vous travaillez avec
des **cat√©gories binaires**.

Par exemple : il est souvent utile de classer les personnes ayant
r√©pondu √† un questionnaire en cat√©gories binaires, telles que :

-   homme/femme

-   mineur/majeur

-   conservateur/lib√©ral

-   etc.

```{r}
#| echo: true
# Si Marc √©tait mineur et Claire majeure, nous les classerions comme suit : 

Marc <- FALSE
Claire <- TRUE

# Dans cet exemple, la variable logique indique si une personne est majeure (TRUE) ou pas (FALSE)

```

## Variables √† plusieurs √©l√©ments : vecteurs

Les **vecteurs** constituent un autre type de variable (ou type d'objet)
essentiel dans la programmation R. Il s'agit de variables comportant
**plusieurs** √©l√©ments.

Vous pouvez cr√©er des vecteurs avec l'operateur d'affectation `<-` et la
**fonction de concatenation** `c()`.

```{r}
#| echo: true
# Voici quelques exemples avec du code ! (faut tout ex√©cuter !)

# un vecteur num√©rique (notez qu'il faut toujours s√©parer les valeurs avec des virgules)
v1 <- c(1, 2, 3)
```

Vous pouvez afficher la valeur de `v1` en tappant son nom et l'ex√©cutant
:

```{r}
#| echo: true
v1 
```

::: {.callout-note icon="true"}
## √Ä noter

En R, une **fonction** est un morceau de code con√ßu pour effectuer une
t√¢che sp√©cifique, souvent avec des param√®tres variables. Ces param√®tres
d'entr√©e sont √©galement appel√©s les **arguments** de la fonction.
:::

Prenons l'exemple de la fonction `c()` qui cr√©e des vecteurs :

-   les arguments de cette fonction doivent √™tre ins√©r√©s entre les
    crochets sous la forme de valeurs s√©par√©es par des virgules (pour
    chaque √©l√©ment du vecteur).

-   Un vecteur √† deux √©l√©ments : `c(2, 4)`

-   Un vecteur √† trois √©l√©ments : `c(3, 6, 9)`

Maintenant, regardons encores quelques exemples de vecteurs de
**diff√©rents types** :

```{r}
#| echo: true
# vecteurs num√©riques 
w <- c(-10, 100, 4, -88)

likes_comments_shares <- c(513, 34, 102)

# vecteurs textuels (toujours ajouter des guillemets pour chaque √©l√©ment !)
animaux <- c("chat", "chien", "cheval", "chenille")

Comm_Insta <- c("trop cool", "wsh", "c'est quoi ?")

humains <- c("Claire", "Clarissa", "Theresa", "Marc", "Alma")

# vecteurs logiques :
femme <- c(TRUE, TRUE, TRUE, FALSE, TRUE)

```

::: {.callout-caution collapse="false"}
## Attention

Dans R, on ne peut g√©n√©ralement pas m√©langer les valeurs num√©riques,
textuelles et logiques dans le m√™me vecteur !
:::

# FIN de Session 1

## Devoir pour Session 2

-   Si ce n'est pas encore fait : Installez R et RStudio sur votre
    ordinateur.

-   Lisez ensuite encore une fois ce script et ex√©cutez toutes les
    sections de code sur votre ordinateur.

-   Essayez de r√©soudre vous-m√™me les √©ventuels messages d'erreur en
    adaptant le code.
